package georesto

import (
	"testing"
	"time"
)

func TestQRCodeVerification(t *testing.T) {
	// Setup - use global managers to ensure they work together
	creator := address("g1creator123")

	// Create a location first using global manager
	location := locationManager.AddLocation(creator, "Test Venue", "A test venue for events", 40.7128, -74.0060, "venue")
	if location == nil {
		t.Fatal("Failed to create location")
	}

	// Create an event using global manager
	currentTime := time.Now().Unix()
	startTime := currentTime + 60 // Starts in 1 minute (close enough to current time)
	endTime := currentTime + 7200 // Ends in 2 hours

	event := eventManager.CreateEvent(creator, location.ID, "QR Test Event", "Testing QR verification", "", int(EventTypeMeetup), startTime, endTime)
	if event == nil {
		t.Fatal("Failed to create event")
	}

	// Test QR code generation
	if event.QRCode == "" {
		t.Error("QR code should be generated automatically")
	}

	if event.VerificationSecret == "" {
		t.Error("Verification secret should be generated automatically")
	}

	// Test verification code generation
	verificationCode := eventManager.GenerateAttendeeVerificationCode(event.ID, creator)
	if verificationCode == "" {
		t.Error("Should generate verification code for event creator")
	}

	if len(verificationCode) != 12 {
		t.Errorf("Verification code should be 12 characters, got %d", len(verificationCode))
	}

	// Test attendee verification
	attendeeAddress := "g1attendee123"
	success := eventManager.VerifyAttendeePresence(event.ID, verificationCode, creator, attendeeAddress)
	if !success {
		t.Error("Should successfully verify attendee with valid code")
	}

	// Check that attendee is now in verified list
	verifiedAttendees := eventManager.GetVerifiedAttendees(event.ID, creator)
	if len(verifiedAttendees) != 1 {
		t.Errorf("Should have 1 verified attendee, got %d", len(verifiedAttendees))
	}

	if verifiedAttendees[0] != attendeeAddress {
		t.Errorf("Expected attendee %s, got %s", attendeeAddress, verifiedAttendees[0])
	}

	// Test duplicate verification (should not add twice)
	success2 := eventManager.VerifyAttendeePresence(event.ID, verificationCode, creator, attendeeAddress)
	if !success2 {
		t.Error("Should still return true for already verified attendee")
	}

	verifiedAttendees2 := eventManager.GetVerifiedAttendees(event.ID, creator)
	if len(verifiedAttendees2) != 1 {
		t.Error("Should not add duplicate verified attendee")
	}

	// Test invalid verification code
	invalidCode := "invalid12345"
	success3 := eventManager.VerifyAttendeePresence(event.ID, invalidCode, creator, "g1other123")
	if success3 {
		t.Error("Should not verify with invalid code")
	}

	// Test access control - non-creator shouldn't access QR code
	nonCreator := address("g1other123")
	qrCode := eventManager.GetEventQRCode(event.ID, nonCreator)
	if qrCode != "" {
		t.Error("Non-creator should not access QR code")
	}

	// Test verification statistics
	total, verified, _ := eventManager.GetAttendeeVerificationStats(event.ID, creator)
	if total != 0 || verified != 1 {
		t.Errorf("Expected stats: total=0, verified=1, got total=%d, verified=%d", total, verified)
	}

	// Add a participant manually (since event might not be active in test)
	// This simulates what would happen if JoinEvent succeeded
	event.Participants = append(event.Participants, attendeeAddress)
	eventManager.events[event.ID] = event // Save changes

	total2, verified2, _ := eventManager.GetAttendeeVerificationStats(event.ID, creator)
	if total2 != 1 || verified2 != 1 {
		t.Errorf("Expected stats: total=1, verified=1, got total=%d, verified=%d", total2, verified2)
	}
}

func TestQRCodeTimeSecurity(t *testing.T) {
	// This test verifies that verification codes are time-limited
	// Note: In a real test environment, we'd manipulate time, but this shows the concept

	creator := address("g1creator123")

	// Create location and event using global managers
	location := locationManager.AddLocation(creator, "Time Test Venue", "Testing time security", 40.7128, -74.0060, "venue")
	startTime := time.Now().Unix() + 3600
	endTime := startTime + 7200

	event := eventManager.CreateEvent(creator, location.ID, "Time Security Test", "Testing time-based security", "", int(EventTypeMeetup), startTime, endTime)

	// Generate a verification code
	code1 := eventManager.GenerateAttendeeVerificationCode(event.ID, creator)

	// Wait a moment and generate another code (should be different due to timestamp)
	// Note: In testing environment, time might not advance enough to see difference
	code2 := eventManager.GenerateAttendeeVerificationCode(event.ID, creator)

	// Codes might be the same in testing environment due to same timestamp
	// But the logic ensures they would be different in real-time usage

	if code1 == "" || code2 == "" {
		t.Error("Both verification codes should be generated")
	}
}
